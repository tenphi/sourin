// Generated by CoffeeScript 1.4.0

/*
Sourin - NativeObject2SourceCode converter for objects that contains functions.
@copyright Yamanov Andrey <tenphi@gmail.com>
@version 0.0.2
*/


(function() {
  var beautify, isArray, isBoolean, isFunction, isNumber, isObject, isString, serializeArray, serializeObject, serializeValue, type, uglify;

  uglify = require('uglify-js');

  beautify = require('js-beautify').js_beautify;

  type = (function() {
    var classToType, name, _i, _len, _ref;
    classToType = {};
    _ref = 'Boolean Number String Function Array Date Regexp Undefined Null'.split(' ');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      classToType['[object ' + name + ']'] = name.toLowerCase();
    }
    return function(obj) {
      return classToType[Object.prototype.toString.call(obj)] || 'object';
    };
  })();

  isArray = function(arr) {
    return type(arr) === 'array';
  };

  isObject = function(obj) {
    return type(obj) === 'object';
  };

  isFunction = function(func) {
    return type(func) === 'function';
  };

  isString = function(str) {
    return type(str) === 'string';
  };

  isBoolean = function(bool) {
    return type(bool) === 'boolean';
  };

  isNumber = function(number) {
    return type(number) === 'number';
  };

  module.exports = function(obj, min) {
    var ret;
    if (isArray(obj)) {
      ret = serializeArray(obj);
    } else if (isObject(obj)) {
      ret = serializeObject(obj);
    } else {
      ret = serializeValue(obj);
    }
    ret = '(' + ret + ')';
    if (min === true) {
      return uglify(ret);
    } else if (min === false) {
      return beautify(ret);
    } else {
      return ret;
    }
  };

  serializeArray = function(obj) {
    var out, val, value, _i, _len;
    out = '[';
    for (_i = 0, _len = obj.length; _i < _len; _i++) {
      val = obj[_i];
      if (value) {
        out += ',';
      }
      value = serializeValue(val);
      out += value;
    }
    return out += ']';
  };

  serializeObject = function(obj) {
    var key, out, value;
    out = '{';
    for (key in obj) {
      if (value) {
        out += ',';
      }
      value = serializeValue(obj[key]);
      key = JSON.stringify(key);
      out += '' + key + ':' + value;
    }
    return out += '}';
  };

  serializeValue = function(value) {
    if (isFunction(value)) {
      return value.toString();
    } else if (isString(value)) {
      return JSON.stringify(value);
    } else if (isArray(value)) {
      return serializeArray(value);
    } else if (isObject(value)) {
      return serializeObject(value);
    } else if (isBoolean(value)) {
      if (value) {
        return 'true';
      } else {
        return 'false';
      }
    } else if (isNumber(value)) {
      return value;
    }
    return void 0;
  };

}).call(this);
